services:
  passenger-service:
    container_name: passenger-service
    build:
      context: ../passenger-service
      dockerfile: ../docker/Dockerfile
      args:
        SERVICE_NAME: passenger-service
    networks:
      - app-net
    environment:
      DB_PASSENGER_URL: jdbc:mysql://passenger-db:3306/passenger_service
      DB_PASSENGER_USERNAME: user
      DB_PASSENGER_PASSWORD: ${DB_PASSENGER_PASSWORD}
      ACTIVE_PROFILES: dev
      PAGE_RESPONSE_LIMIT_SIZE: 50
      KAFKA_URL: kafka:9092
      EUREKA_SERVICE_URL: http://eureka-service:8761/eureka/
      LOKI_URL: http://loki:3100
      ZIPKIN_URL: http://tempo:9411/api/v2/spans
    expose:
      - 8081
    depends_on:
      my-sql-passenger-db:
        condition: service_healthy
        restart: true
      kafka:
        condition: service_healthy
        restart: true
      gateway-service:
        condition: service_healthy
        restart: true

  driver-service:
    container_name: driver-service
    build:
      context: ../driver-service
      dockerfile: ../docker/Dockerfile
      args:
        SERVICE_NAME: driver-service
    networks:
      - app-net
    environment:
      DB_DRIVER_URL: jdbc:mysql://driver-db:3306/driver_service
      DB_DRIVER_USERNAME: user
      DB_DRIVER_PASSWORD: ${DB_DRIVER_PASSWORD}
      ACTIVE_PROFILES: dev
      PAGE_RESPONSE_LIMIT_SIZE: 50
      KAFKA_URL: kafka:9092
      EUREKA_SERVICE_URL: http://eureka-service:8761/eureka/
      LOKI_URL: http://loki:3100
      ZIPKIN_URL: http://tempo:9411/api/v2/spans
    expose:
      - 8082
    depends_on:
      my-sql-driver-db:
        condition: service_healthy
        restart: true
      kafka:
        condition: service_healthy
        restart: true
      gateway-service:
        condition: service_healthy
        restart: true

  rides-service:
    container_name: rides-service
    build:
      context: ../rides-service
      dockerfile: ../docker/Dockerfile
      args:
        SERVICE_NAME: rides-service
    networks:
      - app-net
    environment:
      DB_RIDE_URL: jdbc:mysql://rides-db:3306/ride_service
      DB_RIDE_USERNAME: user
      DB_RIDE_PASSWORD: ${DB_RIDE_PASSWORD}
      ACTIVE_PROFILES: dev
      BASE_URI_PASSENGER: http://passenger-service
      BASE_URI_DRIVER: http://driver-service
      BASE_URI_RIDES: http://rides-service
      PAGE_RESPONSE_LIMIT_SIZE: 50
      TIMETRAVEL_APPID: ${TIMETRAVEL_APPID}
      TIMETRAVEL_APIKEY: ${TIMETRAVEL_APIKEY}
      EUREKA_SERVICE_URL: http://eureka-service:8761/eureka/
      LOKI_URL: http://loki:3100
      ZIPKIN_URL: http://tempo:9411/api/v2/spans
    expose:
      - 8083
    depends_on:
      my-sql-rides-db:
        condition: service_healthy
        restart: true
      gateway-service:
        condition: service_healthy
        restart: true

  rates-service:
    container_name: rates-service
    build:
      context: ../rates-service
      dockerfile: ../docker/Dockerfile
      args:
        SERVICE_NAME: rates-service
    networks:
      - app-net
    environment:
      DB_RATE_URL: jdbc:mysql://rates-db:3306/rates_service
      DB_RATE_USERNAME: user
      DB_RATE_PASSWORD: ${DB_RATES_PASSWORD}
      ACTIVE_PROFILES: dev
      BASE_URI_PASSENGER: http://passenger-service
      BASE_URI_DRIVER: http://driver-service
      BASE_URI_RIDES: http://rides-service
      PAGE_RESPONSE_LIMIT_SIZE: 50
      LAST_RIDES_COUNT_FOR_AVERAGE_RATE: 5
      KAFKA_URL: kafka:9092
      EUREKA_SERVICE_URL: http://eureka-service:8761/eureka/
      LOKI_URL: http://loki:3100
      ZIPKIN_URL: http://tempo:9411/api/v2/spans
    expose:
      - 8084
    depends_on:
      my-sql-rates-db:
        condition: service_healthy
        restart: true
      kafka:
        condition: service_healthy
        restart: true
      gateway-service:
        condition: service_healthy
        restart: true

  gateway-service:
    container_name: gateway-service
    build:
      context: ../gateway-service
      dockerfile: ../docker/Dockerfile
      args:
        SERVICE_NAME: gateway-service
    environment:
      EUREKA_SERVICE_URL: http://eureka-service:8761/eureka/
      LOKI_URL: http://loki:3100
      ZIPKIN_URL: http://tempo:9411/api/v2/spans
    networks:
      - app-net
    ports:
      - 9090:9090
    depends_on:
      eureka-service:
        condition: service_healthy
    healthcheck:
      test: curl -f http://gateway-service:9090/actuator/health
      interval: 5s
      retries: 5
      start_period: 120s
      timeout: 10s

  eureka-service:
    container_name: eureka-service
    build:
      context: ../eureka-service
      dockerfile: ../docker/Dockerfile
      args:
        SERVICE_NAME: eureka-service
    environment:
      LOKI_URL: http://loki:3100
      ZIPKIN_URL: http://tempo:9411/api/v2/spans
    networks:
      - app-net
    ports:
      - 8761:8761
    healthcheck:
      test: curl -f http://eureka-service:8761/actuator/health
      interval: 5s
      retries: 5
      start_period: 120s
      timeout: 10s

  my-sql-passenger-db:
    container_name: passenger-db
    image: mysql:9.2
    restart: always
    networks:
      - app-net
    environment:
      MYSQL_DATABASE: passenger_service
      MYSQL_USER: user
      MYSQL_PASSWORD: ${DB_PASSENGER_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_PASSENGER_ROOT_PASSWORD}
    volumes:
      - passenger-db-data:/data
    expose:
      - 3306
    healthcheck:
      test: [ "CMD", "bash", "-c", "echo -n '' > /dev/tcp/127.0.0.1/3306" ]
      interval: 5s
      retries: 5
      start_period: 120s
      timeout: 10s

  my-sql-driver-db:
    container_name: driver-db
    image: mysql:9.2
    restart: always
    networks:
      - app-net
    environment:
      MYSQL_DATABASE: driver_service
      MYSQL_USER: user
      MYSQL_PASSWORD: ${DB_DRIVER_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_DRIVER_ROOT_PASSWORD}
    volumes:
      - driver-db-data:/data
    expose:
      - 3306
    healthcheck:
      test: [ "CMD", "bash", "-c", "echo -n '' > /dev/tcp/127.0.0.1/3306" ]
      interval: 5s
      retries: 5
      start_period: 120s
      timeout: 10s

  my-sql-rides-db:
    container_name: rides-db
    image: mysql:9.2
    restart: always
    networks:
      - app-net
    environment:
      MYSQL_DATABASE: ride_service
      MYSQL_USER: user
      MYSQL_PASSWORD: ${DB_RIDE_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_RIDE_ROOT_PASSWORD}
    volumes:
      - rides-db-data:/data
    expose:
      - 3306
    healthcheck:
      test: [ "CMD", "bash", "-c", "echo -n '' > /dev/tcp/127.0.0.1/3306" ]
      interval: 5s
      retries: 5
      start_period: 120s
      timeout: 10s

  my-sql-rates-db:
    container_name: rates-db
    image: mysql:9.2
    restart: always
    networks:
      - app-net
    environment:
      MYSQL_DATABASE: rates_service
      MYSQL_USER: user
      MYSQL_PASSWORD: ${DB_RATES_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_RATES_ROOT_PASSWORD}
    volumes:
      - rates-db-data:/data
    expose:
      - 3306
    healthcheck:
      test: [ "CMD", "bash", "-c", "echo -n '' > /dev/tcp/127.0.0.1/3306" ]
      interval: 5s
      retries: 5
      start_period: 120s
      timeout: 10s

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    volumes:
      - zookeeper-data:/data
    expose:
      - 2181
    networks:
      - app-net
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:latest
    volumes:
      - kafka-data:/data
    expose:
      - 9092
    networks:
      - app-net
    environment:
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      interval: 5s
      retries: 5
      start_period: 120s
      timeout: 10s

  grafana:
    container_name: grafana
    image: grafana/grafana:11.6.0
    volumes:
      - ./grafana:/var/lib/grafana
    ports:
      - 3000:3000
    networks:
      - app-net
    environment:
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_NAME=Main Org.
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_INSTALL_PLUGINS=https://storage.googleapis.com/integration-artifacts/grafana-lokiexplore-app/grafana-lokiexplore-app-latest.zip;grafana-lokiexplore-app
    depends_on:
      - victoria-metrics

  victoria-metrics:
    container_name: victoria-metrics
    image: victoriametrics/victoria-metrics:v1.114.0
    volumes:
      - ./victoria-metrics/promscrape.yaml:/victoria-metrics/promscrape.yaml
    ports:
      - 8428:8428
    networks:
      - app-net
    command:
      - '--promscrape.config=/victoria-metrics/promscrape.yaml'

  loki:
    container_name: loki
    image: grafana/loki:main-b4abbf4
    volumes:
      - ./loki:/etc/loki
    ports:
      - 3100:3100
    networks:
      - app-net
    command:
      - '--config.file=/etc/loki/loki-config.yaml'
      - '--config.expand-env=true'

  tempo:
    container_name: tempo
    image: grafana/tempo:main-4fb2b6e
    volumes:
      - ./tempo/tempo.yaml:/etc/tempo.yaml
    ports:
      - 3200:3200
      - 9095:9095
      - 4317:4317
      - 4318:4318
      - 9411:9411
      - 14268:14268
    networks:
      - app-net
    command:
      - '--config.file=/etc/tempo.yaml'

  auth-service:
    container_name: auth-service
    build:
      context: ../auth-service
      dockerfile: ../docker/Dockerfile
      args:
        SERVICE_NAME: auth-service
    networks:
      - app-net
    environment:
      DB_AUTH_URL: jdbc:postgresql://keycloak-db:5432/auth_service
      DB_AUTH_USERNAME: user
      DB_AUTH_PASSWORD: ${DB_KEYCLOAK_PASSWORD}
      EUREKA_SERVICE_URL: http://eureka-service:8761/eureka/
      LOKI_URL: http://loki:3100
      ZIPKIN_URL: http://tempo:9411/api/v2/spans
    ports:
      - 8086:8086
    depends_on:
      keycloak:
        condition: service_started
        restart: true
      gateway-service:
        condition: service_healthy
        restart: true

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:26.1.5
    restart: always
    networks:
      - app-net
    ports:
      - 8080:8080
      - 9000:9000
    environment:
      KC_HEALTH_ENABLED: "true"
      KC_DB_URL_HOST: keycloak-db
      KC_DB_URL_PORT: 5432
      KC_DB: postgres
      KC_DB_URL_DATABASE: auth_service
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_PASSWORD}
      KC_DB_USERNAME: user
      KC_DB_PASSWORD: ${DB_KEYCLOAK_PASSWORD}
    command: ["start-dev", "--http-port=8080"]
    volumes:
      - ./keycloak/init-keycloak.sh:/opt/keycloak/init-keycloak.sh
    entrypoint: [ "sh", "-c", "/opt/keycloak/bin/kc.sh start-dev & /opt/keycloak/init-keycloak.sh" ]
    depends_on:
      postgres-keycloak-db:
        condition: service_healthy
        restart: true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://keycloak:9000/health/ready"]
      interval: 5s
      retries: 5
      start_period: 120s
      timeout: 10s

  postgres-keycloak-db:
    container_name: keycloak-db
    image: postgres:15
    restart: always
    networks:
      - app-net
    environment:
      POSTGRES_DB: auth_service
      POSTGRES_USER: user
      POSTGRES_PASSWORD: ${DB_KEYCLOAK_PASSWORD}
      PGDATA: /data/postgres
    volumes:
      - keycloak-db-data:/data/postgres
    expose:
      - 5432
    healthcheck:
      test: PGPASSWORD=${DB_KEYCLOAK_PASSWORD} psql -U user -d auth_service -h localhost -c "SELECT 1" || exit 1
      interval: 5s
      retries: 5
      start_period: 120s
      timeout: 10s

networks:
  app-net:

volumes:
  passenger-db-data:
  driver-db-data:
  rides-db-data:
  rates-db-data:
  kafka-data:
  zookeeper-data:
  keycloak-db-data:
